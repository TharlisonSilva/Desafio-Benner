unit uSaque;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, StdCtrls, ExtCtrls, uRelatorioSaque
, uMensagem;

type
  TFrmSaque = class(TFrame)
    Label1: TLabel;
    BtnConfirmar: TButton;
    BtnCancelar: TButton;
    BtnUm: TButton;
    Btn2: TButton;
    Btn3: TButton;
    Btn4: TButton;
    Btn5: TButton;
    Btn6: TButton;
    Btn7: TButton;
    Btn8: TButton;
    Btn9: TButton;
    Btn0: TButton;
    BtnClear: TButton;
    PnlValor: TPanel;
    BtnBackspace: TButton;
    procedure BtnUmClick(Sender: TObject);
    procedure Btn2Click(Sender: TObject);
    procedure Btn3Click(Sender: TObject);
    procedure Btn4Click(Sender: TObject);
    procedure Btn5Click(Sender: TObject);
    procedure Btn6Click(Sender: TObject);
    procedure Btn7Click(Sender: TObject);
    procedure Btn8Click(Sender: TObject);
    procedure Btn9Click(Sender: TObject);
    procedure Btn0Click(Sender: TObject);
    procedure BtnClearClick(Sender: TObject);
    procedure BtnBackspaceClick(Sender: TObject);
    procedure BtnCancelarClick(Sender: TObject);
    procedure BtnConfirmarClick(Sender: TObject);
  private
    { Private declarations }
    procedure Saque(Quantia: Integer);

  public
    procedure Tecla(Valor: integer);{ Processa a tecla pressionada }
    procedure OrdenaArrays(Cedulas: Array of Integer; Quantidade: Array of Integer); { ORDENA OS ARRAYS PARA CALCULO INTERNO }
    procedure AlimentaArrays; { ALIMENTAÇÃO DOS ARRAYS COM DADOS DO BANCO, PARA PROCESSAMENTO INTERNO }

    var  { ARRAYS PARA ORDENAÇÃO E CALCULO DAS CEDULAS }
      Cedulas: Array of Integer;
      Quantidade: Array of Integer;

  end;

implementation

uses uFormPrincipal;

{$R *.dfm}

procedure TFrmSaque.BtnUmClick(Sender: TObject);
begin
  Tecla(1);
end;

procedure TFrmSaque.OrdenaArrays(Cedulas: Array of Integer; Quantidade: Array of Integer);
var
  Indice, auxiliar: integer;
  Trocou:Boolean;
begin
  Trocou := True;
  { ORDENAÇÃO EM ORDEM CRESCENTE NO FORMATO BOLHA }
  while(Trocou <> False)do
    begin
      Trocou := False;
      for Indice := low(cedulas) to high(cedulas)-1 do
        begin
          if (cedulas[Indice] < cedulas[Indice +1]) then
            begin
              { ORDENA CEDULAS }
              auxiliar := cedulas[Indice];
              cedulas[Indice]:= cedulas[Indice +1];
              cedulas[Indice +1] := auxiliar;

              { ORDENA QUANTIDADE PARALELO AS CEDULAS }
              auxiliar := Quantidade[Indice];
              Quantidade[Indice]:= Quantidade[Indice +1];
              Quantidade[Indice +1] := auxiliar;

              Trocou := True;
            end;
        end;
    end;
end;

procedure TFrmSaque.Saque(Quantia: Integer);
var
  i: integer;
begin
   if Quantia = 0 then
    begin
      ShowMessage(' Quantia Invalida para saque !');
      FrmPrincipal.AlterarTela(1);
    end
   else
    begin
    AlimentaArrays;
    if length(cedulas) <> 0 then
      OrdenaArrays(Cedulas,Quantidade);
    end;

    for i := Low(cedulas) to High(cedulas) do
      showMessage(IntToStr(cedulas[i]) + '  ' + IntToStr(quantidade[i]));

end;

procedure TFrmSaque.Tecla(Valor: integer);
begin
  if PnlValor.Caption = '0' then
    PnlValor.Caption := IntToStr(Valor)
  else
    PnlValor.Caption := PnlValor.Caption + IntToStr(Valor);
end;

procedure TFrmSaque.Btn2Click(Sender: TObject);
begin
  Tecla(2);
end;

procedure TFrmSaque.Btn3Click(Sender: TObject);
begin
  Tecla(3);
end;

procedure TFrmSaque.Btn4Click(Sender: TObject);
begin
  Tecla(4);
end;

procedure TFrmSaque.Btn5Click(Sender: TObject);
begin
  Tecla(5);
end;

procedure TFrmSaque.Btn6Click(Sender: TObject);
begin
  Tecla(6);
end;

procedure TFrmSaque.Btn7Click(Sender: TObject);
begin
  Tecla(7);
end;

procedure TFrmSaque.Btn8Click(Sender: TObject);
begin
  Tecla(8);
end;

procedure TFrmSaque.Btn9Click(Sender: TObject);
begin
  Tecla(9);
end;

procedure TFrmSaque.AlimentaArrays;
var
  indice, contador:  integer;
begin
   indice   := 0;
   contador := 0;

 { BUSCA DAS CEDULAS PARA ORDENAMENTO EM ARRAY }
    while (FrmPrincipal.cdsNotas.Active) and (indice <> 1) do
      begin
        if (FrmPrincipal.cdsNotas.FieldByName('valor').AsInteger = 1) then
          indice := 1;

        if FrmPrincipal.cdsNotas.FieldByName('quantidade').AsInteger > 0 then
        begin
          setLength(cedulas, length(Cedulas)+1);
          setLength(Quantidade, length(quantidade)+1);
          Cedulas[contador]:= FrmPrincipal.cdsNotas.FieldByName('valor').AsInteger;
          Quantidade[contador]:= FrmPrincipal.cdsNotas.FieldByName('quantidade').AsInteger;
          FrmPrincipal.cdsNotas.FindNext;
          Inc(contador);
        end;

        if FrmPrincipal.cdsNotas.FieldByName('quantidade').AsInteger = 0 then
          FrmPrincipal.cdsNotas.FindNext;

      end;
    FrmPrincipal.cdsNotas.FindFirst;
end;

procedure TFrmSaque.Btn0Click(Sender: TObject);
begin
  Tecla(0);
end;

procedure TFrmSaque.BtnCancelarClick(Sender: TObject);
begin
  FrmPrincipal.AlterarTela(1);
end;

procedure TFrmSaque.BtnClearClick(Sender: TObject);
begin
  PnlValor.Caption := '0';
end;

procedure TFrmSaque.BtnConfirmarClick(Sender: TObject);
begin
Saque(1);
end;

procedure TFrmSaque.BtnBackspaceClick(Sender: TObject);
begin
  if Length(PnlValor.Caption) <= 1 then
    PnlValor.Caption := '0'
  else
    PnlValor.Caption := copy(PnlValor.Caption, 1, Length(PnlValor.Caption)-1);
end;

end.
